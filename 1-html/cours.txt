I- HTML
Description des éléments à afficher (paragraphe, image)
Base d'un document HTML :
Un Doctype : version de html utilisée
    Balise HTML : contient l'ensemble du document
    Balise Head : Les entêtes (configuration)
    Balise Body : les éléments à afficher dans la page

Le html est basé comme le xml sur des balises/tags (ouvrantes/fermantes ou orphelines),
qui peuvent avoir des attributs obligatoires/facultatifs
Le respect de l'indentation est primordial pour la relecture du code :)

Sites :
    - w3schools
    - caniuse
    - stackoverflow
    - php.net
    - symfony.com
    - openclassroom

- div : bloc
- p : paragraphe
- a : lien
- ul : liste à puce / numérotée
- img : image
- br : retour à la ligne
- noeud textuel : du texte sans balise
- h1 à h6 : les titres par ordre d'importance
- table : les tableaux composés de lignes (tr), elles-mêmes composées
de cellules (td)
- span : mise en forme de texte

- form : permettre à l'utilisateur de saisir des informations
Label / placeholder :
    - On peut lier un champ à un label pour faciliter le clic sur le champ :
      en cliquant sur le label, ça sera comme si on avait cliqué sur le champ

    - Ou on peut utiliser les placeholder : indication dans le champ qui disparait
    dès que l'on cmmence à saisir
Type de champs
    - input text : texte
    - password
    - number
    - textarea : grande zone de texte
    - file : upload d'un fichier
    - chebkox et radio : bouton radio et case à cocher

Certains types de champs auront pour effet de bloquer la validation du formulaire
si la valeur saisie n'est pas bonne : par ex. email attend un @

Il y a d'autres attributs qui permettent de faire une première validation du formulaire en HTML5 :
 - required : obligatoire
 - pattern : forcer un format particulier de chaine de caractères : expression régulière
Et puis certains attrbiuts spécifiques à certains champs :
    - min et max pour number
    - minlength et maxlength pour text, email, etc.
    - accept pour file (forcer le type mime)

Méthode GET / POST
    - la méthode GET fait apparaitre les informations dans l'URL
        pratique pour partager des urls contenant des informations
        (comme numéro de page / filtres)
    - POST cache les informations, permet d'envoyer plus d'informations
    - Aucune des deux n'est plus sécurisé que l'autre


Exercice :
    Créer trois fichiers html, qui comporte chacun trois liens:
    Ces trois liens doivent pointer vers chacune de ces 3 pages

Exercice 2 :
    - index :
    - form :
        Coder en HTML un formulaire de candidature avec les champs suivants :
        - civilite
        - nom
        - prenom
        - email
        - un téléphone
        - un CV (fichier)
        - un bouton valider
        Vous pouvez utiliser les labels/placeholders.
        Il faut un attribut name pour chaque champ.

    - list
        - Faire un tableau (avec entêtes) HTML avec autant de colonnes qu'il y a
        de champs de formulaire avec 4 candidatures fictives.
        Pour la colonne CV, vous pouvez juste faire un lien "Voir le CV"


II - CSS
Mise en forme, le style (couleur, bordure)
    1- Créer un fichier .css et de l'inclure dans les pages HTML
    2- On cible les éléments que l'on veut mettre en forme, et on écrit le style à appliquer
       On peut cibler avec 3 sélecteurs différents :
        - par tag : on met le nom de la balise
        - par identifiant (le #) : un identifiant est unique : un seul élément
        - par classe (le .) : les classes peuvent être multiples (on les sépare par des espaces)
         et sur plusieurs éléments

    3- Des priorités s'appliquent sur plusieurs sélecteurs correspond à un même élément
Sélecteur ID > Sélecteur Classe > Sélecteur par tag
Si la priorité des sélecteurs est la même, c'est le dernier sélecteur qui prend le dessus.

    4- On peut mixer grâce à un espace des sélecteurs pour appliquer du style sur des enfants :
    div p : style sur les paragraphes qui se trouvent dans un div (peu importe le niveau de "parent" du div

    5- On peut appliquer le même pour plusieurs sélecteurs : il suffit de les séparer par des virgues. Ex:
    div p, span : les p dans des div, et les spans

!important > inline > Sélecteur ID > Sélecteur Classe > Sélecteur par tag

    6- Responsive : avec le même HTML, on va adapter la mise en page en CSS grâce à des médias queries

    7- Framework css/js (des classes css et des fonctions js déjà existantes prêtes à être utilisées dans notre site):
        - Bootstrap
        - Materializecss

        Ces frameworks vont être dans otre fichier en premier, c'est-à-dire avant notre perso, histoire
        que notre code puisse si besoin surcharger le code du framework.

Exercice :
    Mettre en forme le formulaire et le tableau
    Inclure bootstrap
    - Formulaire :
        - utilisez le style bootstrap sur les champs du formulaire
        - mettez le formulaire dans un div : ce div doit faire 300px de largeur, et être centré dans la page
        - le div doit avoir une couleur de fond gris clair
    - Liste :
        - Mettre une bordure sur le tableau (et chacune de ses cellules - faire pour que les bordures
          ne soient doublés)
        - Centrer le texte dans chacune des cellules
        - Utiliser le style de bootstrap pour le tableau afin que les lignes change de couleur de fond
          une ligne sur deux
    Utilisez les sélecteurs que vous souhaitez pour cibler les éléments HTML

III - Système de versionning GIT :

Récupérer un projet versionné avec git
La première fois quand le projet n'existe pas sur votre machine :
git clone https://github.com/ice-devel/formation-2020-2.git

Et les fois d'après pour récupérer les dernières versions
git pull