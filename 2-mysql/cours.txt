1- Intro

a- Echange client/serveur :
 - La base de données est côté serveur : on y accéde grâce à un langage serveur comme PHP, Java
 - MySQL est l'un des SGBDR (système de gestion de base de données relationnelles) les plus connus
 - Concurrence : Postgresql, Microsoft, SQL server, Oracle
 - Une base de données assure la persistence (sauvegarde sur la durée des données)

b- Structure d'une base de données :
    - Table
        - Champ 1 (VARCHAR, INT, DATETIME, BOOLEAN)
        - Champ 2
    - Table 2 :
        - Champ 1
        - Champ 2

On crée une table par type de données métier. Exemple dans un site e-commerce :
    - Produit
    - Commande
    - Utilisateur

Dans chaque table, on met une clé primaire : dans cette colonne, les données ne peuvent pas
être présentes plus d'une fois. C'est une contrainte.

En général, la clé primaire est un champ AUTO-INCREMENT : la bdd gère elle-même la donnée
lors de l'insertion d'un enregistrement.

2- Utilisation
On utile le langage SQL pour communiquer avec une base de données SQL.
    - Le SQL pour la structure
    - Le SQL pour les données
Pour gérer les données dans une base : le CRUD (create-read-update-delete)

    a- SELECT : la sélection des données

        - Tout sélectionner dans une table :
          SELECT * FROM user
        - Tout sélectionner mais obtenir uniquement certains colonnes
          SELECT name, email FROM user

        - Restreindre les résultats en fonction de conditions : WHERE
        - Tous les utilisateurs qui s'appelent toto :
          SELECT * FROM user WHERE name = 'toto'


        - Qui s'appelle toto et qui ont un email enregistré
          SELECT * FROM user WHERE name = 'toto' AND email IS NOT null

        - Avec des priorités entre parenthèse
          SELECT * FROM user
          WHERE name='test'
          AND email IS NOT null
          OR id > 3

          SELECT * FROM user
            WHERE name='test'
            AND (email IS NOT null
            OR id > 3)
    b- les opérateurs de comparaison
        = : égal à
        >, <, != : supérieur à, inférieur à, différent de

        LIKE : une chaine respectant un format avec la possibilité % ou _
            % : 0, 1 ou plusieurs caractères
            _ : 1 caractère obligatoire
        Exemple : les utilisateurs inscrits en 2019
            SELECT * FROM user WHERE created_at LIKE '2019%'

        BETWEEN : WHERE id BETWEEN 1 AND 3
                    WHERE id >= 1 AND id <= 3
        IN : WHERE name IN ('toto', 'gérard', 'jean')
        NOT IN : WHERE name NOT IN ('toto', 'gérard', 'jean')

    c- Exercices : écrire les requêtes SQL correspondantes :
        - Sélectionner tous les utilisateurs inscrits en 2006
        - Sélectionner tous les utilisateurs inscrits entre 2016 et 2018
        - Sélectionner le nom des utilisateurs dont le nom commence par 'th'
            ou l'adresse email est sur gmail
        - Sélectionner les utilisateurs dont le nom est "fab" ou "jean"
            et dont l'adresse email est remplie

        - SELECT * FROM user WHERE created_at LIKE '2006%'
          SELECT * FROM user WHERE YEAR(created_at) = 2006

        - SELECT * FROM user WHERE created_at
        BETWEEN '2016-01-01 00:00:00' AND '2018-12-31 23:59:59'
        - SELECT * FROM user WHERE YEAR(created_at) BETWEEN 2016 AND 2018

        - SELECT name FROM user WHERE name LIKE 'th%' OR email LIKE '%@gmail.com'

        - SELECT * FROM user WHERE (name = 'fab' OR name ='jean') AND email IS NOT NULL
        - SELECT * FROM user WHERE name IN ('fab', 'jean') AND email IS NOT NULL

    d- Clauses avancées
        - ORDER BY : trier le jeu de résultat en fonction d'une ou plusieurs colonnes
        SELECT * FROM user ORDER BY name ASC, created_at ASC

        - GROUP BY : grouper les enregistrements en fonction d'une ou plusieurs colonnes

        afficher le nombre de joueur par équipe
        SELECT COUNT(*), team FROM `user` GROUP BY team

        afficher le nombre de joueur par équipe et par code postal
        SELECT COUNT(*), team, zipcode FROM `user` GROUP BY team, zipcode

        - HAVING : complément/condition d'un GROUP BY

        Sélectionner le nombre de joueurs par équipe et ne sortir que les équipes
        qui ont au moins 2 joueurs :
        SELECT COUNT(*), team FROM `user` GROUP BY team HAVING COUNT(*) >= 2

        SELECT COUNT(*) AS nb_players, team FROM `user`
        GROUP BY team HAVING nb_players >= 2


    e- Insertion en bdd
    INSERT INTO user (id, name, email, team, is_enabled, zipcode)
    VALUES (NULL, 'toto', 'toto55@mail.fr', 3, 1, '59300');

    f- Suppression
    DELETE FROM user // supprime tous les utilisateurs
    DELETE FROM user WHERE id = 2 // supprime l'enregistrement dont l'id est égal à 2

    g- mise à jour
    UPDATE user SET name = 'Fabrice' WHERE id = 3
    UPDATE user SET name = 'Fabrice', is_enabled=1 WHERE id = 3

    h- Fonctions scalaires
        Une fonction scalaire agit sur chaque entrée. On peut les utiliser dans un SELECT
        comme dans un WHERE.

        - UPPER() : mettre en majuscule une colonne
        SELECT UPPER(name) FROM user
        SELECT id, UPPER(name), zipcode FROM user
        SELECT * FROM user WHERE name = UPPER('toto')

        INSERT INTO user (name) VALUES(UPPER('toto'))

        - LOWER() : mettre en minuscule

        - LENGTH() : nombre de caractères dans la donnée
        SELECT LENGTH(name) FROM user
        SELECT * FROM user WHERE LENGTH(name) >= 5

        - ROUND(moyenne) : arrondir à l'entier le plus proche
        - ROUND(moyenne, 2) : arrondir à deux chiffres après la virgule
        - CEILING(moyenne) : arrondir à l'entier supérieur
        - FLOOR(moyenne) : arrondir à l'entier inférieur

    i- Fonctions agrégats :
        - COUNT() : nombre d'enregistrement dans une table
        SELECT COUNT(*) FROM user

        - MAX() : retourne le maximum
        SELECT MAX(team) FROM user

        - MIN() : retourne le minimum
        - SUM() :
        - AVG() :

    Ces fonctions peuvent être utilisées en combinaison avec la clause GROUP BY
    Obtenir la somme des points par équipe
    SELECT SUM(points), team FROM user GROUP BY team

    -j : Les jointures


    -k : Pour aller plus loin
    Les sous-requêtes, les vues, les procédures stockées, les triggers